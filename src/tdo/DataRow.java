package tdo;

import java.io.Serializable;
import tdo.service.TableServices;

/**
 * Определяет функциональность объектов, реализующих интерфейс и предназначенных
 * для представления одного ряда данных.
 * 
 * Методы класса обеспечивают следующие функции:
 * <ul>
 *   <li>Доступ к элементам данных по целочисленному индексу или имени;</li>
 *   <li>Изменение элементов данных, путем назначения заданного значения
 *      для заданного индекса или имени;
 *   </li>
 *   <li>Удаление ряда;</li>
 *   <li>Поддержку <i>буфферизации обновлений</i> ряда использованием методов
 *       {@link #beginEdit}, {@link #endEdit} и {@link #cancelEdit}. 
 *       Буфферизация позволяет отложить применения правил валидности данных, до
 *       выдачи метода <code>endEdit</code>;
 *   </li>
 *   <li>
 *       Поддержку версионности ряда.
 *   </li>
 * </ul>
 * 
 * <p>Ряд может содержать  свойство <code>state</code> типа {@link tdo.RowState}.
 * Это свойство может, например, предоставлять сведения об 
 * <i>оригинальном(первичном)</i>   <i>текущем</i> состоянии ряда, о текущей 
 * <i>моде буфферизации изменений</i>, оригинальном состоянии удаленного ряда, 
 * а также содержать хранилище поддержки версионности. 
 * <p>Реализация интнрфейса не обязана реализовывать буфферизацию изменений 
 * и/или версионность рядов.
 */
public interface DataRow extends NamedValues,Serializable {

    public static final int CANCELEDIT_RESET_ROW_VERSIONS = 10;
    public static final int CANCELEDIT_INSERTING = 15;
    public static final int CANCELEDIT = 20;
    public static final int SETVALUE = 25;
    public static final int SETVALUE_INSERTING = 30;
    public static final int BEGINEDIT = 35;
    
    public static final int ENDEDIT_BEFORE = 40;
    public static final int ENDEDIT_RESET_ROW_VERSIONS = 45;
    
    public static final int ENDEDIT_INSERTING = 50;
    public static final int ENDEDIT = 55;
    
    public static final int DELETE = 60;
    public static final int ATTACH = 65;
    public static final int ATTACHNEW = 70;



    
    public static final int UNKNOWN = -1;

    /**
     * Оповещает ряд о том, что он добавлен в коллекцию рядов.
     * Поведение ряда, когда он создан, но еще не добавлен в коллекцию, может 
     * отличаться от поведения ряда уже находящегося в коллекции рядов.
     * Например, в реализации по умолчанию {@link tdo.DefaultDataRow} 
     * при использовании метода <code>add(DataRow)</code> к ряду применяется
     * данный метод, что, в свою очередь меняет внутреннее состояние
     * из {@link tdo.RowState#DETACHED в LOADED.
     * <p>Метод предназначен для внутреннего использования.
     * Не следует использовать в приложении. Классы-наследники могут 
     * переопределять и использовать метод, обращая внимание на реализацию
     * <code>tdo.Table</code>.
     * @see #attachNew
     */
    void attach();

    /**
     * Оповещает ряд о том, что он добавлен в коллекцию рядов.
     * Поведение ряда, когда он создан, но еще не добавлен в коллекцию, может 
     * отличаться от поведения ряда уже находящегося в коллекции рядов.
     * Например, в реализации по умолчанию {@link tdo.DefaultDataRow} 
     * при использовании метода <code>add()</code> без параметров к ряду 
     * применяется данный метод, что, в свою очередь меняет внутреннее состояние
     * из {@link tdo.RowState#DETACHED в INSERTING.
     * <p>Метод предназначен для внутреннего использования.
     * Не следует использовать в приложении. Классы-наследники могут 
     * переопределять и использовать метод, обращая внимание на реализацию
     * <code>tdo.Table</code>.
     * @see #attachNew
     */
    void attachNew();

    /**
     * Включает буфферизацию изменений ряда.
     * Реализация интерфейса может поддерживать <i>буфферизацию изменений</i>.
     * Под этим понимается следующее:
     * <p>Gрежде чем проводить изменение данных ряда, для него выдается метод
     * <code>beginEdit()</code>, который <i>включает</i> буфферизацию. 
     * <p>Если для ряда буфферизация не используется, то любое изменения данных ряда
     * приводит к проверке ряда на вылидность и, возможно другим операциям.
     * Рассмотрим следующий сценарий.
     * 
     * <p>Требуется извлечь из таблицы реляционной базы данных сведения о прежних
     *    местах работы какого-либо сотрудника. Выполняется запрос к базе данных
     *    и полученный <code>java.sql.ResultSet</code> используется для заполнения
     *    таблицы <code>DataTable tbl;</code>. Таблица мест работы в числе других 
     *    полей содержит поля: <i>startDate</i> - дата приема на работу и 
     *    <i>endDate</i> - дата ухода. Одна из звписей содержит startDate=='13 mar 2002'
     *    и endDate=='12 may 2003'. Здесь оказалась случайная ошибка. На самом деле
     *    должно быть: startDate=='13 mar 2004' и endDate=='13 mar 2005'. Можно 
     *    предположить, что сначала пользователь, используя какую либо оконную
     *    форму изменит startDate на правильное значение, а затем попытается перейти
     *    к изменению второго поля. Если не определены в приложении правила валидации,
     *    такие как <i><code>startDate <= endDate</code></i>, то все будет нормально. 
     *    Однако, если указанное выше правило определено, то возникает исключительная
     *    ситуация {@link tdo.impl.ValidateException}, что весьма не удобно. 
     * 
     * <p>Буфферизация изменений гарантирует, что валидация не производится, до тех
     * пор, пока не будет вызван метод {@link #endEdit}.
     * 
     * @see #endEdit
     * @see #cancelEdit
     */
    void beginEdit();
    /**
     * Отменяет текущие изменения и восстанавливает содержимое ряда в состояние 
     * до изменений.
     * 
     * @see #beginEdit
     * @see #setValue(Object,int)
     * @see #endEdit
     */
    void cancelEdit();
    /**
     * Копирует содержимое заданного ряда.
     * 
     * Если значение параметра <code>null</code>, то операцияя не производится.
     * Копируются только ячейки ряда. Состояние полей и свойств ряда, в том 
     * числе и свойства <code>state</code> не изменяется.
     * @param row ряд, содержимое которого копируется
     * @see tdo.DataCellProvider
     */
    void copyFrom(DataRow row);
    /**
     * Копирует элементы заданного массива в ячейки рядаряда.
     * 
     * Копируются только ячейки ряда. Состояние полей и свойств ряда, в том 
     * числе и свойства <code>state</code> не изменяется.
     * <p>Делегирует выполнение провайдеру ячеек.
     * 
     * @param source мпассив значений, элементы которого копируется в данный ряд
     * @see tdo.DataCellProvider
     */
    void copyFrom(Object[] source);
    /**
     * Создает и возвращает новый ряд, значение ячеек которого совпадает со
     * значениями ячеек текущего ряда.
     * @return новый ряд-копия текущего
     * @see tdo.DataRowProvider
     */
    DataRow createCopy();
    
    /**
     * Создает и возвращает новый ряд, значение ячеек которого совпадает со
     * значениями ячеек заданного ряда.
     * @param row ряд, ячейки которого копируются в созданный ряд
     * @see tdo.DataRowProvider
     * @return новый ряд-копия заданного ряда
     */
    DataRow createCopyOf(DataRow row);
    /**
     * 
     * Удаляет ряд. 
     * 
     */ 
    void delete();
    /**
     *  Завершает редактирование ряда. 
     * @see #beginEdit
     * @see #cancelEdit
     */
    void endEdit();
    /**
     *  Завершает редактирование ряда.
     * @param forceValidate метод
     * {@link tdo.Table#validate(DataRow, boolean)}  вызывается со
     *  значением второго параметра равным значению данного параметра
     * @see #beginEdit
     * @see #cancelEdit
     */
    void endEdit(boolean throwException);

    /**
     * Возвращает контект таблицы,  для которого создан ряд.
     * @return контекст
     * @see tdo.service.TableServices
     */
    TableServices getContext();
    /**
     * Возвращает текущий провайдер ячеек ряда.
     * 
     * Интерфейс не специфицирует состав информации о внутренней структуре 
     * обрабатываемых данных и о соответствии индексов ячеек ряда и 
     * действительными данными. Все операции по доступу к содержимому, которые 
     * требуют индекс колонки или ее имя, делегируются объекту типа 
     * <code>DataCellProvider</code>.
     * 
     * @return текущий провайдер ячеек ряда.
     * @see tdo.DataCellProvider
     * @see #setDataCellProvider
     */
    DataCellCollection getCellCollection();
    /**
     * Возвращает индекс ряда в таблице.
     * 
     * @return индекс ряда в таблице
     * @see tdo.Table#find(tdo.DataRow) 
     */
    int getIndex();
    /**
     * Возвращает экземпляр объекта, описывающего состояние ряда.
     * Если класс реализующий интерфейс не поддерживает <code>RowState</code>,
     * то метод должен возвращать значение <code>null</code>.
     * @return экземпляр типа <code>tdo.RowState</code>
     * @see {@link tdo.RowState}
     * @see {@link #DefaultRowState}
     */
    RowState getState();
    /**
     * Возвращает значение по заданному индексу колонки.
     * 
     * @param columnIndex индекс колонки
     * @return значение ячейки ряда, соответствующее заданному индексу колонки
     */
    Object getValue(int columnIndex);
    /**
     * Возвращает значение по заданному имени колонки.
     * @param columnName имя колонки
     * @return значение ячейки ряда, соответствующее заданному имени колонки
     */
    @Override
    Object getValue(String columnName);
    /**
     * Возвращает значение индицирующее возможность изменения ячеек ряда.
     * 
     * Метод может быть полезен в случае, например, когда ряд таблица 
     * отображается в <code>javax.swing.JTable</code> и мы хотим, чтобы
     * некоторые ряды не могли быть выбраны для редактирования.
     * 
     * @return <code>true</code> если значения ячеек ряда не могут изменяться.
     *   <code>false</code> в противном случае.
     */
    boolean isReadOnly();
    
    /**
     * Устанавливает новое значение индицирующее возможность изменения ячеек ряда.
     * 
     * Метод может быть полезен в случае, например, когда ряд таблица 
     * отображается в <code>javax.swing.JTable</code> и мы хотим, чтобы
     * некоторые ряды не могли быть выбраны для редактирования.
     * @param readOnly новое значение индикатора
     */
    void setReadOnly(boolean readOnly);
    /**
     * Устанавливает ячейку ряда, специфицированную индексом колонки в заданное
     * значение.
     * @param value новое значение ячейки ряда
     * @param columnIndex индекс колонки, соответствующая ячейка которой
     * изменяется
     */
    void setValue(Object value, int columnIndex);
    /**
     * Устанавливает ячейку ряда, специфицированную именем колонки в заданное
     * значение.
     * @param value новое значение ячейки ряда
     * @param columnName имя колонки, соответствующая ячейка которой
     * изменяется
     */
    void setValue(Object value, String columnName);

    <T> T getObject();
 
    boolean validateColumn(String columnName, Object value);
    boolean validate();
    
}